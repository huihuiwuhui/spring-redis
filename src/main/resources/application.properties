##端口号
server.port=8888
# Redis数据库索引（默认为0）
spring.redis.database=0 
# Redis服务器地址
spring.redis.host=192.168.1.102
# Redis服务器连接端口
spring.redis.port=6379 
# Redis服务器连接密码（默认为空）

#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8 
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1 
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8 
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0 
# 连接超时时间（毫秒）
spring.redis.timeout=300
apache.rocketmq.consumer.PushConsumer=PushConsumer
apache.rocketmq.producer.producerGroup=Producer
apache.rocketmq.namesrvAddr=localhost:9876

spring.main.allow-bean-definition-overriding=true

#sharding-jdbc分片规则
#配置数据源 m0,m1,m2,s0,s1,s2
spring.shardingsphere.datasource.names = m0
spring.shardingsphere.datasource.m0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0.url = jdbc:mysql://localhost:3306/xyy_finance?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false
#spring.shardingsphere.datasource.m0.url = jdbc:mysql://db2-dev.mysql.ybm100.top:3307/xyy_finance?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false
spring.shardingsphere.datasource.m0.username = root
spring.shardingsphere.datasource.m0.password = root

sharding.jdbc.config.sharding.tables.finance_ledger.actual-data-Nodes = m0.finance_ledger_${['wuhan','chongqing']}
sharding.jdbc.config.sharding.tables.finance_ledger.table-strategy.standard.sharding-column = org_code
sharding.jdbc.config.sharding.tables.finance_ledger.databaseStrategy.complex.algorithmClassName=org= com.itcv.demo.sharding.config.MyShardingConfig
spring.shardingsphere.props.sql.show = true
# 指定t_order表的数据分布情况，配置数据节点 m1.t_order_1,m1.t_order_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=m0.t_order_$->{1..2}
# 指定t_order表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 指定t_order表的分片策略，分片策略包括分片键和分片算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}

#mybatis setting
mybatis.type-aliases-package = com.itcv.demo.*.po
mybatis.mapper-locations = classpath*:mapper/*.xml
mybatis.configuration.map-underscore-to-camel-case = true
mybatis.configuration.default-executor-type = reuse
#@see BaseServiceImpl.FIND_PART_SIZE
mybatis.configuration.default-fetch-size = 16
mybatis.configuration.default-statement-timeout = 1000
#\u4EE5\u4E0B\u914D\u7F6E\u81EA\u5B9A\u4E49\u5C5E\u6027\u8FBE\u5230mybatis\u72EC\u7ACB\u65E5\u5FD7\u8F93\u51FA
mybatis.configuration.log-prefix = mybatis.sql.
mybatis.configuration.logback.name = mybatis.sql
mybatis.configuration.logback.level = info

#springboot-elastic-job配置
elaticjob.zookeeper.server-lists = localhost:2181
elaticjob.zookeeper.namespace = spring-redis
elaticjob.zookeeper.strategyclass = com.itcv.demo.job.config.JobScheduleStrategy

finance.orgList=002,011,013 
